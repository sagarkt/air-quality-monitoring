{"version":3,"sources":["components/header/index.js","constants/index.js","pages/cities/components/city_card.js","utilities/since_time_formatter.js","utilities/time_am_pm_formatter.js","pages/cities/index.js","App.js","reportWebVitals.js","index.js"],"names":["Home","Jumbotron","Component","aqiStandards","min","max","category","colorCode","City","aqi","aqiStandard","find","roundedAQI","Math","round","Number","EPSILON","style","color","Container","Card","border","Body","Row","className","Col","xs","sm","md","lg","xl","Title","this","props","city","Text","formatAQI","data","old","limit","height","type","lastUpdatedDate","timeSince","date","seconds","floor","Date","hours","getHours","minutes","getMinutes","ampm","formatAMPM","ws","WebSocket","state","allCities","onopen","console","log","onmessage","evt","cities","JSON","parse","forEach","push","sinceTimeFormatter","setState","onclose","App","path","component","Cities","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.670e7930.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\nexport default class Home extends Component {\n  render() {\n    return(\n      <Jumbotron>\n        <h1>Air Quality Index Monioring</h1>\n        <p>View City wise AQI</p>\n      </Jumbotron>\n    )\n  }\n}\n","export const aqiStandards = [\n  {\n    min: 0,\n    max: 51,\n    category: 'Good',\n    colorCode: '#55A84F'\n  },\n  {\n    min: 51,\n    max: 101,\n    category: 'Satisfactory',\n    colorCode: '#A3C853'\n  },\n  {\n    min: 101,\n    max: 201,\n    category: 'Moderate',\n    colorCode: '#FFF834'\n  },\n  {\n    min: 201,\n    max: 301,\n    category: 'Poor',\n    colorCode: '#F29C33'\n  },\n  {\n    min: 301,\n    max: 401,\n    category: 'Very Poor',\n    colorCode: '#E93F33'\n  },\n  {\n    min: 401,\n    max: 501,\n    category: 'Severe',\n    colorCode: '#AF2D24'\n  },\n];\n","import { Component } from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport {aqiStandards} from '../../../constants';\nimport { Sparklines, SparklinesLine, SparklinesSpots, SparklinesReferenceLine } from 'react-sparklines';\n\nexport default class City extends Component {\n\n  formatAQI(aqi) {\n    let aqiStandard = aqiStandards.find(function(aqiStandard) {\n      return aqiStandard.min <= aqi && aqiStandard.max > aqi;\n    });\n    let roundedAQI = Math.round((aqi + Number.EPSILON) * 100) / 100;\n    return <span style={{color: aqiStandard.colorCode}}>{roundedAQI}</span>;\n  }\n\n  render() {\n    return(\n      <Container>\n        <Card border=\"primary\">\n          <Card.Body>\n            <Row className=\"justify-content-md-center\">\n              <Col xs=\"6\" sm=\"6\" md=\"2\" lg=\"2\" xl=\"2\">\n                <Card.Title>{this.props.city.city}</Card.Title>\n              </Col>\n              <Col xs=\"6\" sm=\"6\" md=\"2\" lg=\"2\" xl=\"2\">\n                <Card.Text>AQI: {this.formatAQI(this.props.city.aqi)}</Card.Text>\n              </Col>\n              <Col xs=\"12\" sm=\"12\" md=\"4\" lg=\"4\" xl=\"4\">\n                <Sparklines data={this.props.city.old} limit=\"30\" height=\"50\">\n                  <SparklinesLine color=\"#1c8cdc\" />\n                  <SparklinesSpots />\n                  <SparklinesReferenceLine type=\"max\" />\n                </Sparklines>\n\n              </Col>\n              <Col xs=\"12\" sm=\"12\" md=\"4\" lg=\"4\" xl=\"4\">\n                <Card.Text>\n                  Updated {this.props.city.lastUpdatedDate}\n                </Card.Text>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </Container>\n    )\n  }\n}\n","import formatAMPM from './time_am_pm_formatter';\n\nexport default function timeSince(date) {\n  let seconds = Math.floor((new Date() - date) / 1000);\n  if (seconds < 60) return \"A few seconds ago\";\n\n  let minutes = Math.floor(seconds/60)\n  if(minutes < 1) return \"A minute ago\";\n\n  formatAMPM(date);\n}\n","export default function formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours >= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes < 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n","import React, { Component } from 'react';\nimport CityCard from './components/city_card';\nimport sinceTimeFormatter from '../../utilities/since_time_formatter';\n\nexport default class Home extends Component {\n\n  ws = new WebSocket('ws://city-ws.herokuapp.com');\n\n  constructor() {\n    super();\n    this.state = { allCities: {} };\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      console.log('connected');\n    }\n\n    this.ws.onmessage = evt => {\n      let cities = JSON.parse(evt.data);\n      let allCities = this.state.allCities;\n      let lastUpdatedDate = new Date();\n      cities.forEach((city) => {\n        allCities[city.city] = allCities[city.city] || {};\n        allCities[city.city]['old'] = allCities[city.city]['old'] || [];\n        allCities[city.city]['old'].push(city.aqi);\n        allCities[city.city]['latest'] = {\n          city: city.city,\n          aqi: city.aqi,\n          lastUpdatedDate: sinceTimeFormatter(lastUpdatedDate),\n          old: allCities[city.city]['old']\n        };\n      });\n      this.setState({allCities: allCities});\n    }\n\n    this.ws.onclose = () => {\n      console.log('disconnected');\n    }\n  }\n\n  render() {\n    let cities = [];\n    for(let city in this.state.allCities) {\n      cities.push(<CityCard city={this.state.allCities[city]['latest']} key={this.state.allCities[city]['latest'].city}/>);\n    }\n    return cities;\n  }\n}\n","import { Route, Switch } from 'react-router-dom';\nimport Header from './components/header';\nimport Cities from './pages/cities';\nimport './App.css';\n\nfunction App() {\n  return (\n    <main>\n      <Header />\n      <Switch>\n        <Route path=\"/\" component={Cities} exact />\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}